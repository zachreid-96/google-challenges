
----------------------------------------------------------------------------------------------

Counting All Partitions

Write a Python program to calculate the total number of partitions of a given integer n. For example:

    Input: n=4
    Output: 5 (Partitions: 4,3+1,2+2,2+1+1,1+1+1+1)

----------------------------------------------------------------------------------------------

Partitions with Exactly k Parts

Write a program to find the number of partitions of n into exactly k parts. For example:

    Input: n=6,k=3
    Output: 3 (Partitions: 4+1+1,3+2+1,2+2+2)

Hint: You can adapt the recurrence relation to enforce that each partition has exactly k parts by tracking the part count in the DP table.

----------------------------------------------------------------------------------------------

Partitions into Odd Parts Only

Find all the partitions of nn where every part is an odd number. For example:

    Input: n=6
    Output: 4 (Partitions: 5+1,3+3,3+1+1+1,1+1+1+1+1+1)

----------------------------------------------------------------------------------------------

Partitions into Distinct Parts

Write a program to calculate the number of partitions of n where all parts are distinct (no repeated integers). For example:

    Input: n=6
    Output: 4 (Partitions: 6,5+1,4+2,3+2+1)

----------------------------------------------------------------------------------------------

Partitions with Parts Summing to a Multiple of m

Count the number of partitions of n such that the sum of all the parts in the partition is a multiple of m. For example:

    Input: n=6,m=3
    Output: 7 (Partitions: 6,5+1,4+2,3+3,3+2+1,2+2+2,1+1+1+1+1+1)

Hint: Modify the DP relation to filter partitions based on divisibility by m.

----------------------------------------------------------------------------------------------

Partitions with Constraints on the Maximum Part

Write a program to find the number of partitions of n such that no part in the partition exceeds pp. For example:

    Input: n=6,p=3
    Output: 7 (Partitions: 3+3,3+2+1,3+1+1+1,2+2+2,2+2+1+1,2+1+1+1+1,1+1+1+1+1+1)

Hint: You can modify the DP table to enforce that the largest part is ≤p≤p.

----------------------------------------------------------------------------------------------

Partitions with a Gap Constraint

Count the number of partitions of n such that each part is at least k greater than the previous part. For example:

    Input: n=6,k=1
    Output: 11 (Partitions: 6,5+1,4+2,4+1+1,…)

    Input: n=6,k=2
    Output: 4 (Partitions: 6,4+2,3+1+1+1,2+1+1+1+1)

----------------------------------------------------------------------------------------------

Partitions into Prime Parts

Count the number of partitions of n such that all the parts are prime numbers. For example:

    Input: n=5
    Output: 2 (Partitions: 5,3+2)

    Input: n=7
    Output: 3 (Partitions: 7,5+2,3+2+2)

----------------------------------------------------------------------------------------------
